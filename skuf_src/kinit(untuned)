#!/usr/bin/bash

readonly skuf_version="24.2+39.2"
readonly sep="$(echo -ne '\037')"

smbaddr="$sep"
smbport="$sep"
smbversion="$sep"
smbdomain="$sep"
smbusername="$sep"
smbpassword="$sep"
smbvolumepath="$sep"
smbvolumefilename="$sep"
smbswapfilename="$sep"
smbmountopts="$sep"
newrootmountopts="$sep"
newrootfsck="$sep"
mountmode="ro"

re_smbusername=
re_smbpassword=
uq_smbvolumepath=
uq_smbvolumefilename=
uq_smbswapfilename=

kernelopts="$sep"

kernelpath="$sep"
initramfspath="$sep"

interface_list=
sambaopts=

skuf_skip=
maybe_skip=0
# SKUF_PRESETS_START #
preset_smbusername=
preset_smbpassword=
preset_smbaddr=
preset_smbport=
preset_smbversion=
preset_smbdomain=
preset_smbvolumepath=
preset_smbvolumefilename=
preset_smbswapfilename=
preset_smbmountopts=
preset_newrootmountopts=
preset_newrootfsck=
preset_kernelopts=
preset_kernelpath=
preset_initramfspath=
preset_smbretry=
preset_skip=
# SKUF_PRESETS_END #

display_version() {
    local letter1="$(( RANDOM % 7 ))"
    local letter2="$(( RANDOM % 7 ))"
    local letter3="$(( RANDOM % 7 ))"
    local letter4="$(( RANDOM % 7 ))"

    echo -e "\e[1;3${letter1}mS\e[0m\e[1;3${letter2}mK\e[0m\e[1;3${letter3}mU\e[0m\e[1;3${letter4}mF\e[0m v${skuf_version}"
}

itsquiet() {
    [ "${quiet}" == "y" ]
}

___() {
    if [ "$1" == "_" ]; then
        echo -e '\e[0m'
    else
        echo -ne '\e[0m'
    fi
}

flush_stdin() {
    local unused
    read -r -d '' -t 0.1 -n 9999 unused
    unset unused
}

check_smbusername() {
    if [ "$smbusername" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbusername" ]; then
        echo -e "  \e[1;31m! Login missing\e[0m"
        return 1
    fi

    return 0
}

check_smbusername2() {
    if [ "$re_smbusername" == "$sep" ]; then
        return 1
    fi

    return 0
}

check_smbpassword() {
    if [ "$smbpassword" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbpassword" ]; then
        echo -e "  \e[1;31m! Password missing\e[0m"
        return 1
    fi

    return 0
}

check_smbpassword2() {
    if [ "$re_smbpassword" == "$sep" ]; then
        return 1
    fi

    return 0
}

read_smbpassword() {
    local ylw="$(echo -ne '\001\e[1;33m\002')"
    local password charcount prompt char i=1

    echo -n "Password:               $ylw"

    if [ -n "$preset_smbpassword" ] && [ "$1" != "retry" ]; then
        charcount="${#preset_smbpassword}"
        password="$preset_smbpassword"
        while [ $i -le $charcount ]; do
            prompt="${prompt}*"
            i=$(( i + 1 ))
        done
    else
        charcount=0
    fi

    while IFS= read -p "$prompt" -r -s -n 1 char; do
        if [ "$char" == $'\0' ]; then
            break
        fi
        if [ "$char" == $'\177' ] || [ "$char" == $'\010' ]; then
            if [ $charcount -gt 0 ]; then
                charcount=$(( charcount - 1 ))
                prompt=$'\b \b'
                password="${password%?}"
            else
                prompt=''
            fi
        else
            charcount=$(( charcount + 1 ))
            prompt='*'
            password="${password}${char}"
        fi
    done

    if [ "$1" == "retry" ]; then
        re_smbpassword="$password"
    else
        smbpassword="$password"
    fi

}

check_smbaddr() {
    if [ "$smbaddr" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbaddr" ]; then
        echo -e "  \e[1;31m! SAMBA server address missing\e[0m"
        return 1
    fi
    # shellcheck disable=SC1003
    case "$smbaddr" in
        *'/'*|*'\'*)
            echo -e "  \e[1;31m! SAMBA server address cannot be a path\e[0m"
            return 1
            ;;
    esac

    return 0
}

check_smbport() {
    if [ "$smbport" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbport" ]; then
        return 0
    fi
    if [ -n "$smbport" ] && [ -z "${smbport//[0-9]/}" ]; then
        return 0
    else
        echo -e "  \e[1;31m! This does not look like SAMBA port\e[0m"
        return 1
    fi
}

check_smbversion() {
    if [ "$smbversion" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbversion" ]; then
        return 0
    fi
}

check_smbdomain() {
    if [ "$smbdomain" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbdomain" ]; then
        return 0
    fi
}

check_smbvolumepath() {
    if [ "$smbvolumepath" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbvolumepath" ]; then
        echo -e "  \e[1;31m! Path to folder missing\e[0m"
        return 1
    fi

    return 0
}

check_smbvolumefilename() {
    if [ "$smbvolumefilename" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbvolumefilename" ]; then
        echo -e "  \e[1;31m! Volume file name missing\e[0m"
        return 1
    fi
    case "$smbvolumefilename" in
        *"/")
            echo -e "  \e[1;31m! Volume file cannot be a folder\e[0m"
            return 1
            ;;
    esac

    return 0
}

check_smbswapfilename() {
    if [ "$smbswapfilename" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbswapfilename" ]; then
        return 0
    fi
    case "$smbswapfilename" in
        *"/")
            echo -e "  \e[1;31m! Swap file cannot be a folder\e[0m"
            return 1
            ;;
    esac

    return 0
}

check_smbmountopts() {
    if [ "$smbmountopts" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbmountopts" ]; then
        return 0
    fi
}

check_newrootmountopts() {
    if [ "$newrootmountopts" == "$sep" ]; then
        return 1
    fi
    if [ -z "$newrootmountopts" ]; then
        return 0
    fi
}

check_newrootfsck() {
    if [ "$newrootfsck" == "$sep" ]; then
        return 1
    fi
    case "$newrootfsck" in
        1|Y|y|Yes|yes|True|true|Д|д|Да|да)
            return 0
            ;;
        0|N|n|No|no|False|false|Н|н|Нет|нет)
            return 0
            ;;
        "")
            return 0
            ;;
        *)
            echo -e "  \e[1;31m! Unknown answer variant\e[0m"
            return 1
            ;;
    esac
}

check_kernelopts() {
    if [ "$kernelopts" == "$sep" ]; then
        return 1
    fi
    if [ -z "$kernelopts" ]; then
        return 0
    fi
}

check_kernelpath() {
    if [ "$kernelpath" == "$sep" ]; then
        return 1
    fi
    if [ -z "$kernelpath" ]; then
        echo -e "  \e[1;31m! Path to kernel missing\e[0m"
        return 1
    fi
    case "$kernelpath" in
        *"/")
            echo -e "  \e[1;31m! Path to kernel cannot be a folder\e[0m"
            return 1
            ;;
    esac

    return 0
}

check_initramfspath() {
    if [ "$initramfspath" == "$sep" ]; then
        return 1
    fi
    if [ -z "$initramfspath" ]; then
        echo -e "  \e[1;31m! Path to initramfs missing\e[0m"
        return 1
    fi
    case "$initramfspath" in
        *"/")
            echo -e "  \e[1;31m! Path to initramfs cannot be a folder\e[0m"
            return 1
            ;;
    esac

    return 0
}

translate_preset_var() {
    case "$1" in
        "")
            echo X
            ;;
        "SAMBA_USERNAME"|"samba_username")
            echo "smbusername"
            ;;
        "SAMBA_PASSWORD"|"samba_password")
            echo "smbpassword"
            ;;
        "SAMBA_ADDRESS"|"samba_address")
            echo "smbaddr"
            ;;
        "SAMBA_PORT"|"samba_port")
            echo "smbport"
            ;;
        "SAMBA_VERSION"|"samba_version")
            echo "smbversion"
            ;;
        "SAMBA_DOMAIN"|"samba_domain")
            echo "smbdomain"
            ;;
        "VOLUME_PATH"|"volume_path")
            echo "smbvolumepath"
            ;;
        "VOLUME_FILENAME"|"volume_filename")
            echo "smbvolumefilename"
            ;;
        "SWAP_FILENAME"|"swap_filename")
            echo "smbswapfilename"
            ;;
        "SAMBA_EXTRA_MOUNT_OPTS"|"samba_extra_mount_opts")
            echo "smbmountopts"
            ;;
        "VOLUME_EXTRA_MOUNT_OPTS"|"volume_extra_mount_opts")
            echo "newrootmountopts"
            ;;
        "CHECK_FS"|"check_fs")
            echo "newrootfsck"
            ;;
        "EXTRA_KERNEL_OPTS"|"extra_kernel_opts")
            echo "kernelopts"
            ;;
        "PATH_TO_NEW_KERNEL"|"path_to_new_kernel")
            echo "kernelpath"
            ;;
        "PATH_TO_NEW_INITRAMFS"|"path_to_new_initramfs")
            echo "initramfspath"
            ;;
        "MAX_SMB_RETRY_COUNT"|"max_smb_retry_count")
            echo "smbretry"
            ;;
        *)
            echo X
            ;;
    esac
}

populate_single_presets() {
    all_singles="$(grep -E -o "(^|[[:space:]]+)skuf\.((samba_username|samba_password|samba_address|samba_port|samba_version|samba_domain|volume_path|volume_filename|swap_filename|samba_extra_mount_opts|check_fs|extra_kernel_opts|path_to_new_kernel|path_to_new_initramfs|max_smb_retry_count|skip|SAMBA_USERNAME|SAMBA_PASSWORD|SAMBA_ADDRESS|SAMBA_PORT|SAMBA_VERSION|SAMBA_DOMAIN|VOLUME_PATH|VOLUME_FILENAME|SWAP_FILENAME|SAMBA_EXTRA_MOUNT_OPTS|CHECK_FS|EXTRA_KERNEL_OPTS|PATH_TO_NEW_KERNEL|PATH_TO_NEW_INITRAMFS|MAX_SMB_RETRY_COUNT|SKIP)=(\"(\\\\\"|\\\\\\\\|[^\"\\])*\"|'(\\\'|\\\\\\\\|[^'\\])*'|(\\\ |\\\\\"|\\\'|\\\\\\\\|[^[:space:]\"'\\])*)|(ski|SKI)[^[:space:]\"'\\=]+)" "${1:-/proc/cmdline}" | sed 's/^[[:space:]]*//')"
    if [ -n "$all_singles" ]; then
        skip_single="$(echo "$all_singles" | grep -E -o "^skuf\.(skip|SKIP)(=.*)?$" | sed '$!d')"
        all_singles="$(echo "$all_singles" | sed '/^skuf\.ski/d;/^skuf\.SKI/d')"
    fi
}

process_skip() {
    local cutted

    case "$preset_skip" in
        "")
            skuf_skip=0
            ;;
        1|Y|y|Yes|yes|True|true|Д|д|Да|да)
            skuf_skip=1
            ;;
        0|N|n|No|no|False|false|Н|н|Нет|нет)
            skuf_skip=0
            ;;
        *)
            skuf_skip=0
            ;;
    esac

    case "$skip_single" in
        "")
            maybe_skip=1
            ;;
        "skuf.skip"|"skuf.SKIP")
            skuf_skip=1
            ;;
        "skuf.skip="*|"skuf.SKIP="*)
            cutted="${skip_single#*=}"
            cutted="${cutted//[\"\'\\ ]/}"
            case "$cutted" in
                "")
                    maybe_skip=1
                    ;;
                1|Y|y|Yes|yes|True|true|Д|д|Да|да)
                    skuf_skip=1
                    ;;
                0|N|n|No|no|False|false|Н|н|Нет|нет)
                    skuf_skip=0
                    ;;
                *)
                    maybe_skip=1
                    ;;
            esac
            ;;
    esac
}

process_presets() {
    local sym1="$(echo -ne '\002')"
    local sym2="$(echo -ne '\003')"
    local all_singles skip_single
    local evalvar evalname evalvalue creds everything i skip_wish=0

    populate_single_presets "${1:-/proc/cmdline}"
    process_skip

    if [ -n "$all_singles" ]; then
        while read -r evalvar; do
            evalname="${evalvar%%=*}"
            evalname="${evalname#skuf\.}"
            evalname="$(translate_preset_var "$evalname")"

            evalvalue="${evalvar#*=}"
            case "$evalvalue" in
                \"*\")
                    evalvalue="${evalvalue#\"}"
                    evalvalue="${evalvalue%\"}"
                    evalvalue="${evalvalue//\\\"/\"}"
                    evalvalue="${evalvalue//\\\\/\\}"
                    ;;
                \'*\')
                    evalvalue="${evalvalue#\'}"
                    evalvalue="${evalvalue%\'}"
                    evalvalue="${evalvalue//\\\'/\'}"
                    evalvalue="${evalvalue//\\\\/\\}"
                    ;;
                *)
                    evalvalue="${evalvalue//\\ / }"
                    evalvalue="${evalvalue//\\\"/\"}"
                    evalvalue="${evalvalue//\\\'/\'}"
                    evalvalue="${evalvalue//\\\\/\\}"
                    ;;
            esac

            eval 'preset_'"$evalname"'="$evalvalue"'
        done <<EOF
$all_singles
EOF
        [ "$maybe_skip" == 1 ] && skip_wish=1
    fi

    creds="$(grep -E -o "(^|[[:space:]]+)\[.*;.*\]$" "${1:-/proc/cmdline}" | sed 's/^[[:space:]]*//;$!d')"
    if [ -n "$creds" ]; then
        creds="${creds#\[}"
        creds="${creds%\]}"
        preset_smbusername="${creds%%;*}"
        preset_smbpassword="${creds#*;}"
        [ "$maybe_skip" == 1 ] && skip_wish=1
    fi

    everything="$(grep -E -o "(^|[[:space:]]+)\{.*;.*\}$" "${1:-/proc/cmdline}" | sed 's/^[[:space:]]*//;$!d')"
    if [ -n "$everything" ]; then
        everything="${everything#\{}"
        everything="${everything%\}}"
        everything="$(echo "$everything" | sed "s/\\\\\\\\/$sym1/g;s/\\\;/$sym2/g;s/;/$sep/g;s/$sym1/\\\\/g;s/$sym2/;/g")"

        for i in smbusername smbpassword smbaddr smbport smbversion smbdomain smbvolumepath smbvolumefilename smbswapfilename smbmountopts newrootmountopts newrootfsck kernelopts kernelpath initramfspath; do
            eval 'preset_'"$i"'="${everything%%"$sep"*}"'
            case "$everything" in *"$sep"*) : ;; *) break ;; esac
            everything="${everything#*"${sep}"}" # cut
        done

        [ "$maybe_skip" == 1 ] && skip_wish=1
    fi

    if [ $skip_wish -eq 1 ]; then
        if [ -n "$preset_smbusername"       ] && \
           [ -n "$preset_smbpassword"       ] && \
           [ -n "$preset_smbaddr"           ] && \
           [ -n "$preset_smbvolumepath"     ] && \
           [ -n "$preset_smbvolumefilename" ] && \
           [ -n "$preset_kernelpath"        ] && \
           [ -n "$preset_initramfspath"     ]; then
            skuf_skip=1
        fi
    fi
}

apply_presets() {
    smbusername="$preset_smbusername"
    smbpassword="$preset_smbpassword"
    smbaddr="$preset_smbaddr"
    smbport="$preset_smbport"
    smbversion="$preset_smbversion"
    smbdomain="$preset_smbdomain"
    smbvolumepath="$preset_smbvolumepath"
    smbvolumefilename="$preset_smbvolumefilename"
    smbswapfilename="$preset_smbswapfilename"
    smbmountopts="$preset_smbmountopts"
    newrootmountopts="$preset_newrootmountopts"
    newrootfsck="$preset_newrootfsck"
    kernelopts="$preset_kernelopts"
    kernelpath="$preset_kernelpath"
    initramfspath="$preset_initramfspath"
}

user_read() {
    local ylw="$(echo -ne '\001\e[1;33m\002')"
    local blu="$(echo -ne '\001\e[1;36m\002')"

    echo -e "To change the keyboard layout, press \e[1mAlt+Shift\e[0m (ru)" # SKUF_RU #

    while ! check_smbusername; do
        read -r -e -p "Login:                  $ylw" \
                -i "$preset_smbusername" smbusername
        ___
    done
    while ! check_smbpassword; do
                read_smbpassword
        ___ _
    done
    while ! check_smbaddr; do
        read -r -e -p "SAMBA server address:   $ylw" \
                -i "$preset_smbaddr" smbaddr
        ___
    done
    while ! check_smbport; do
        read -r -e -p "SAMBA server port:      $ylw" \
                -i "$preset_smbport" smbport
        ___
    done
    while ! check_smbversion; do
        read -r -e -p "SAMBA protocol version: $ylw" \
                -i "$preset_smbversion" smbversion
        ___
    done
    while ! check_smbdomain; do
        read -r -e -p "SAMBA server domain:    $ylw" \
                -i "$preset_smbdomain" smbdomain
        ___
    done
    while ! check_smbvolumepath; do
        read -r -e -p "Path to your folder:    $ylw" \
                -i "$preset_smbvolumepath" smbvolumepath
        ___
    done
    while ! check_smbvolumefilename; do
        read -r -e -p "Volume file name:       $ylw" \
                -i "$preset_smbvolumefilename" smbvolumefilename
        ___
    done
    while ! check_smbswapfilename; do
        read -r -e -p "Swap file name:         $ylw" \
                -i "$preset_smbswapfilename" smbswapfilename
        ___
    done
    while ! check_smbmountopts; do
        read -r -e -p "Extra SAMBA mount options:  $ylw" \
                -i "$preset_smbmountopts" smbmountopts
        ___
    done
    while ! check_newrootmountopts; do
        read -r -e -p "Extra volume mount options: $ylw" \
                -i "$preset_newrootmountopts" newrootmountopts
        ___
    done
    while ! check_newrootfsck; do
        read -r -e -p "Check volume FS? [yes/No]:  $ylw" \
                -i "$preset_newrootfsck" newrootfsck
        ___
    done
    while ! check_kernelopts; do
        read -r -e -p "Extra kernel parameters:    $ylw" \
                -i "$preset_kernelopts" kernelopts
        ___
    done
    echo '....................................'
    while ! check_kernelpath; do
        read -r -e -p "Path to new kernel:         $blu" \
                -i "$preset_kernelpath" kernelpath
        ___
    done
    while ! check_initramfspath; do
        read -r -e -p "Path to new initramfs:      $blu" \
                -i "$preset_initramfspath" initramfspath
        ___
    done

    ___ _
}

bring_lo_up() {
    msg "[] Bringing UP 'lo' network interface"
    ip link set lo up
}

shutdown_interfaces() {
    local i

    msg "[] Bringing DOWN network interfaces"

    ip addr flush dev lo
    ip link set lo down

    for i in $interface_list; do
        ip addr flush dev "$i"
        ip link set "$i" down
    done
}

get_smbaddr_type() {
    local so_this_is

    if echo "$smbaddr" | grep -q -E -o '^[0-9]{1,3}(\.[0-9]{1,3}){3}$'; then
        case "$smbaddr" in
            "169.254."*)
                so_this_is=ipv4ll
                ;;
            *)
                so_this_is=ipv4
                ;;
        esac
    elif echo "$smbaddr" | grep -q -E -o '^(::)?[0-9a-fA-F]{1,4}(::?[0-9a-fA-F]{1,4}){1,7}(::)?(%[0-9a-zA-Z_-]+)?$'; then
        case "$smbaddr" in
            [fF][eE]80::*)
                so_this_is=slaac
                ;;
            *)
                so_this_is=ipv6
                ;;
        esac
    elif echo "$smbaddr" | grep -q -o '.*\.local$'; then
        so_this_is=zeroconf
    else
        so_this_is=domain
    fi

    echo "$so_this_is"
}

check_dhcpcd() {
    # brain-aneurysm.mp3
    local dump i ipv4_grep ipv6ra_grep dhcpv6_grep ipv4=0 ipv6=0 slaac=0 ipv4ll=0

    if ! dump="$(dhcpcd -U 0</dev/null)"; then
        echo "Error: failed to dump DHCP lease"
        return 1
    fi

    if ! echo "$dump" | grep -q "[^[:space:]]"; then
        echo "dhcpcd failed: no network interface has been used"
        return 1
    fi

    if ! echo "$dump" | grep -q -E -o "^ifcarrier=[\"']?up[\"']?$"; then
        echo "dhcpcd failed: no working carrier found"
        return 1
    fi

    ipv4_grep="$(echo "$dump"   | grep -E -o "^ip_address=[\"']?..*[\"']?$")"
    ipv6ra_grep="$(echo "$dump" | grep -E -o "^nd[0-9]+_addr[0-9]+=[\"']?..*[\"']?$")"
    dhcpv6_grep="$(echo "$dump" | grep -E -o "^dhcp6_ia_na[0-9]+_ia_addr[0-9]+=[\"']?..*[\"']?$")"

    while read -r i; do
        i="${i#*=}"
        i="${i//[\"\']/}"
        case "$i" in
            "") :                  ;;
            "169.254."*) ipv4ll=1  ;;
            *) ipv4=1              ;;
        esac
    done <<GREP
$ipv4_grep
GREP

    while read -r i; do
        i="${i#*=}"
        i="${i//[\"\']/}"
        case "$i" in
            "") :                  ;;
            [fF][eE]80::*) slaac=1 ;;
            *) ipv6=1              ;;
        esac
    done <<GREP
$ipv6ra_grep
$dhcpv6_grep
GREP

    case "$type_of_smbaddr" in
        "ipv4")
            if [ $ipv4 -gt 0 ]; then
                return 0
            else
                echo "dhcpcd failed: IPv4 address not received"
                return 1
            fi
            ;;
        "ipv4ll")
            if [ $ipv4   -gt 0 ] || \
               [ $ipv4ll -gt 0 ]; then
                return 0
            else
                echo "dhcpcd failed: IPv4 address not received"
                return 1
            fi
            ;;
        "ipv6"|"slaac")
            if [ $ipv6  -gt 0 ] || \
               [ $slaac -gt 0 ]; then
                return 0
            else
                echo "dhcpcd failed: IPv6 address not received"
                return 1
            fi
            ;;
        "zeroconf"|"domain")
            if [ $ipv4   -gt 0 ] || \
               [ $ipv6   -gt 0 ] || \
               [ $slaac  -gt 0 ] || \
               [ $ipv4ll -gt 0 ]; then
                return 0
            else
                echo "dhcpcd failed: IP address not received"
                return 1
            fi
            ;;
    esac

    return 1
}

get_dhcp() {
    local i interface type_of_smbaddr x=0 sleepsec=5 fail2start=0

    for i in /sys/class/net/*; do
        interface="${i##*/}"

        case "$interface" in
            "")   continue ;;
            eth*) : ;;
            en*)  : ;;
            *)    continue ;;
        esac

        interface_list="$interface_list $interface"
        x=$(( x + 1 ))
    done

    if [ $x -eq 0 ]; then
        echo "Error: no wired network interface found. Good luck."
        # shellcheck disable=SC2086
        run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
        launch_interactive_shell --exec
    fi

    msg "[] Obtaining IP address via DHCP"

    type_of_smbaddr="$(get_smbaddr_type)"
    case "$type_of_smbaddr" in "zeroconf"|"ipv4ll")
        sleepsec=10
        sed -i 's/^noipv4ll$/# noipv4ll #/' /etc/dhcpcd.conf ;;
    esac
    ###################################
    if dhcpcd $(itsquiet && echo " -q") --allowinterfaces 'eth* en*'; then
        msg "-> dhcpcd forked. Sleeping $sleepsec seconds..."
        sleep "$sleepsec"
    else
        fail2start=1
    fi
    ###################################
    if [ $fail2start -eq 1 ] || ! check_dhcpcd; then
        # We should try again
        msg "-> dhcpcd failed. Trying again..."
        sleep 1
        dhcpcd $(itsquiet && echo " -q -q") -x
        fail2start=0
        # For buggy IPv6 RA
        sed -i 's/^# ipv6ra_fork #$/ipv6ra_fork/' /etc/dhcpcd.conf
        ###################################
        if dhcpcd $(itsquiet && echo " -q") --allowinterfaces 'eth* en*'; then
            msg "-> dhcpcd forked. Sleeping $sleepsec seconds..."
            sleep "$sleepsec"
        else
            fail2start=1
        fi
        ###################################
        if [ $fail2start -eq 1 ] || ! check_dhcpcd; then
            case "$type_of_smbaddr" in "zeroconf"|"ipv4ll")
                sed -i 's/^# noipv4ll #$/noipv4ll/' /etc/dhcpcd.conf ;;
            esac
            sed -i 's/^ipv6ra_fork$/# ipv6ra_fork #/' /etc/dhcpcd.conf
            echo "Failed to acquire DHCP address."
            launch_interactive_shell
        fi
    fi
}

quirk_vars() {
    msg "[] Quirking variables"

    uq_smbvolumepath="$smbvolumepath"
    smbvolumepath="${smbvolumepath//@u@/${smbusername/@*/}}"
    smbvolumepath="${smbvolumepath//@fu@/${smbusername}}"
    case "$smbvolumepath" in
        "/")     : ;;
        "/"*"/") : ;;
        "/"*)    smbvolumepath="${smbvolumepath}/" ;;
        *"/")    smbvolumepath="/${smbvolumepath}" ;;
        "")      : ;;
        *)       smbvolumepath="/${smbvolumepath}/" ;;
    esac

    uq_smbvolumefilename="$smbvolumefilename"
    smbvolumefilename="${smbvolumefilename//@u@/${smbusername/@*/}}"
    smbvolumefilename="${smbvolumefilename//@fu@/${smbusername}}"
    case "$smbvolumefilename" in
        "/"*) smbvolumefilename="${smbvolumefilename#/}" ;;
    esac
    case "$smbvolumefilename" in
        *"/") smbvolumefilename="${smbvolumefilename%/}" ;;
    esac

    uq_smbswapfilename="$smbswapfilename"
    smbswapfilename="${smbswapfilename//@u@/${smbusername/@*/}}"
    smbswapfilename="${smbswapfilename//@fu@/${smbusername}}"
    case "$smbswapfilename" in
        "/"*) smbswapfilename="${smbswapfilename#/}" ;;
    esac
    case "$smbswapfilename" in
        *"/") smbswapfilename="${smbswapfilename%/}" ;;
    esac

    return 0
}

quirk_post() {
    case "$newrootfsck" in
        1|Y|y|Yes|yes|True|true|Д|д|Да|да)
            newrootfsck="Yes"
            ;;
        0|N|n|No|no|False|false|Н|н|Нет|нет)
            newrootfsck="No"
            ;;
    esac

    case "$kernelpath" in
        *"/") kernelpath="${kernelpath%/}" ;;
    esac
    case "$kernelpath" in
        "/"*) : ;;
        "")   : ;;
        *)    kernelpath="/${kernelpath}" ;;
    esac

    case "$initramfspath" in
        *"/") initramfspath="${initramfspath%/}" ;;
    esac
    case "$initramfspath" in
        "/"*) : ;;
        "")   : ;;
        *)    initramfspath="/${initramfspath}" ;;
    esac

    return 0
}

retry_samba() {
    local ylw="$(echo -ne '\001\e[1;33m\002')"
    local finalusername finalport finalversion finaldomain finalmountopts i x=1

    i="${preset_smbretry}"

    if [ -z "$i" ] || [ -n "${i//[0-9]/}" ]; then
        i=0
    fi

    [ $i -gt 0 ] || return 1

    echo -e "\e[0;31mFailed to mount SAMBA share\e[0m! \e[0;36mEnter your credentials\e[0m \e[1magain\e[0m."
    echo -e "Press \e[1;36m[Enter]\e[0m to use your old username/password"

    while [ $x -le $i ]; do
        re_smbusername="$sep"
        re_smbpassword="$sep"
        smbvolumepath="$uq_smbvolumepath"
        smbvolumefilename="$uq_smbvolumefilename"
        smbswapfilename="$uq_smbswapfilename"

        flush_stdin

        while ! check_smbusername2; do
            read -r -e -p "Login:                  $ylw" \
                    re_smbusername
            ___
        done

        if [ -n "$re_smbusername" ]; then
            smbusername="$re_smbusername"
        fi

        while ! check_smbpassword2; do
                    read_smbpassword retry
            ___ _
        done

        if [ -n "$re_smbpassword" ]; then
            smbpassword="$re_smbpassword"
        fi

        quirk_vars

        finalusername=",username=$smbusername"
        [ -z "$smbport"      ] || finalport=",port=$smbport"
        [ -z "$smbversion"   ] || finalversion=",vers=$smbversion"
        [ -z "$smbdomain"    ] || finaldomain=",domain=$smbdomain"
        [ -z "$smbmountopts" ] || finalmountopts=",$smbmountopts"

        msg "[] Remounting SAMBA"

        if PASSWD="$smbpassword" mount -t cifs -o "${mountmode}${finalusername}${finalport}${finalversion}${finaldomain}${finalmountopts}" "//${smbaddr}${smbvolumepath}" /samba; then
            return 0
        else
            echo "Failed to mount SAMBA share!"
            x=$(( x + 1 ))
            continue
        fi
    done

    return 1
}

mount_samba() {
    local finalusername finalport finalversion finaldomain finalmountopts

    finalusername=",username=$smbusername"
    [ -z "$smbport"      ] || finalport=",port=$smbport"
    [ -z "$smbversion"   ] || finalversion=",vers=$smbversion"
    [ -z "$smbdomain"    ] || finaldomain=",domain=$smbdomain"
    [ -z "$smbmountopts" ] || finalmountopts=",$smbmountopts"

    msg "[] Mounting SAMBA"

    if ! PASSWD="$smbpassword" mount -t cifs -o "${mountmode}${finalusername}${finalport}${finalversion}${finaldomain}${finalmountopts}" "//${smbaddr}${smbvolumepath}" /samba; then
        if ! retry_samba; then
            echo "Failed to mount SAMBA share!"
            echo "PASSWD=\"$smbpassword\" mount -t cifs -o \"${mountmode}${finalusername}${finalport}${finalversion}${finaldomain}${finalmountopts}\" \"//${smbaddr}${smbvolumepath}\" /samba"
            launch_interactive_shell
        fi
    fi
}

fsck_in_samba() {
    # We shouldn't do it in R/O mode...
    case "$newrootfsck" in
    Yes|yes|Y|y)
    if [ "$(blkid -o value -s TYPE /samba/"${smbvolumefilename}")" == "btrfs" ]; then
        btrfsck /samba/"${smbvolumefilename}" || launch_interactive_shell
    else
        fsck -T -a -C /samba/"${smbvolumefilename}"
        fsckreturn="$?"

        if [ -n "$fsckreturn" ] && [ "$fsckreturn" -ne 255 ]; then

        if bitfield_has_bit "$fsckreturn" 4; then
            echo "fsck failed..."
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 2; then
            echo "fsck tells you need to reboot"
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 8; then
            echo "Something went wrong while fsck..."
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 16; then
            echo "Syntax error in fsck"
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 32; then
            echo "Somehow you canceled fsck"
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 128; then
            echo "fsck FATAL ERROR xD"
            launch_interactive_shell
        fi

        fi
    fi
    ;;
    No|no|N|n)
        :
    ;;
    "")
        :
    ;;
    esac
}

mount_newroot() {
    local ext4mountmode newrootmountoptsx

    msg "[] Mounting volume"

    case "$mountmode" in
        "ro") ext4mountmode="ro,noload" ;;
        "rw") ext4mountmode="rw"        ;;
    esac

    if [ -n "$newrootmountopts" ]; then
        newrootmountoptsx=",$newrootmountopts"
    fi

    if [ "$(blkid -o value -s TYPE /samba/"${smbvolumefilename}")" == "ext4" ]; then
        if ! mount -t "ext4" -o "${ext4mountmode}${newrootmountoptsx}" /samba/"${smbvolumefilename}" /new_root; then
            echo "Failed to mount /new_root!"
            echo "mount -t \"ext4\" -o \"${ext4mountmode}${newrootmountoptsx}\" /samba/\"${smbvolumefilename}\" /new_root"
            launch_interactive_shell
        fi
    else
        if ! mount -t "${rootfstype:-auto}" -o "${mountmode}${newrootmountoptsx}" /samba/"${smbvolumefilename}" /new_root; then
            echo "Failed to mount /new_root!"
            echo "mount -t \"${rootfstype:-auto}\" -o \"${mountmode}${newrootmountoptsx}\" /samba/\"${smbvolumefilename}\" /new_root"
            launch_interactive_shell
        fi
    fi
}

setup_sambaopts() {
    local sambaoptsx

    msg "[] Building and encrypting /proc/cmdline"

    sambaoptsx="${smbaddr}${sep}${smbport}${sep}${smbversion}${sep}${smbdomain}${sep}${smbusername}${sep}${smbpassword}${sep}${uq_smbvolumepath}${sep}${uq_smbvolumefilename}${sep}${uq_smbswapfilename}${sep}${smbmountopts}${sep}${newrootmountopts}${sep}${newrootfsck}"
    # SKUF_OPENSSL_ENC #
    sambaoptsx="$(echo -n "$sambaoptsx" | openssl enc -e -aes-256-cbc -salt -iter 1234 -base64 -A -k '12345678' -in - -out -)" # SKUF_OPENSSL_ENC_RM #
    sambaoptsx="${sambaoptsx//=/%}"
    sambaoptsx="${sambaoptsx:10}"

    # SKUF_ENC_TUNE #

    sambaopts="skuf49=${sambaoptsx}:"
}

setup_kernelopts() {
    if [ -n "$kernelopts" ]; then
        kernelopts="$kernelopts "
    fi
}

unpack_switch() {
    msg "[] Unpacking environment for switch_root"

    mount -t tmpfs switch /switch -o size=5M

    tar -x -f /rootfs.tar -C /switch
}

prepare_kexec() {
    msg "[] Loading kernel and initramfs into RAM"

    if ! /switch/bin/kexec -l "/new_root${kernelpath}" --initrd="/new_root${initramfspath}" --command-line="${kernelopts}${sambaopts}" --reset-vga; then
        echo "Failed to load kernel and initramfs to RAM!"
        echo "/switch/bin/kexec -l \"/new_root${kernelpath}\" --initrd=\"/new_root${initramfspath}\" --command-line=\"${kernelopts}${sambaopts}\" --reset-vga"
        launch_interactive_shell
    fi
}

prepare_switch() {
    msg "[] Modifying kexec environment"

    ln -sfT /proc/self/mounts /switch/etc/mtab

    cat <<'SWITCHEOF' >> /switch/init
export PATH=/bin

kill -SIGTERM -1
sleep 1
kill -SIGKILL -1
sleep 1

clear
echo -ne '\e[3J'

exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console

_soterm="$(stty size)"

umount -a
umount -a

_ud="${_soterm%% *}"
_lr="${_soterm##* }"
_udc="$(( ( _ud - 8 ) / 2 ))"
_lrc="$(( ( _lr - 53 ) / 2 ))"

funmsg1=" _    _                                            _ "
funmsg2="| |  | |                                          | |"
funmsg3="| |__| | ___ _ __ ___  __      _____    __ _  ___ | |"
funmsg4="|  __  |/ _ \ '__/ _ \ \ \ /\ / / _ \  / _\` |/ _ \| |"
funmsg5="| |  | |  __/ | |  __/  \ V  V /  __/ | (_| | (_) |_|"
funmsg6="|_|  |_|\___|_|  \___|   \_/\_/ \___|  \__, |\___/(_)"
funmsg7="                                        __/ |        "
funmsg8="                                       |___/         "

clear
echo -ne '\e[3J'

xxx=0
while [ "$xxx" != "$_udc" ]; do
    xxx="$(( xxx + 1 ))"
    echo ""
done

yyy=0
zzz=0
while [ "$yyy" != 8 ]; do
    yyy="$(( yyy + 1 ))"
    zzz=0
    while [ "$zzz" != "$_lrc" ]; do
        zzz="$(( zzz + 1 ))"
        echo -n " "
    done
    eval 'echo "$funmsg'$yyy'"'
done

ccc=0
while [ "$ccc" != "$_udc" ]; do
    ccc="$(( ccc + 1 ))"
    echo ""
done

sleep 1

exec kexec -e
SWITCHEOF
}

unmount_stuff() {
    msg "[] Unmounting volume and SAMBA"
    umount /new_root
    sleep 1
    umount /samba
    sleep 1
}

kill_dhcp_client() {
    msg "[] Shutting down dhcpcd"
    dhcpcd $(itsquiet && echo " -q -q") -x
}

perform_kexec() {
    msg "[!] Executing new kernel"

    exec env -i TERM="$TERM" SHELL=/bin/ash switch_root \
         /switch /init
}

export PATH='/usr/local/sbin:/usr/local/bin:/usr/bin'

udevd_running=0
mount_handler=default_mount_handler
init=/sbin/init
rd_logmask=0

. /init_functions

unset -f launch_interactive_shell
# shellcheck disable=SC2120
launch_interactive_shell() {
    export PS1='[rootfs \W]\$ '

    # explicitly redirect to /dev/console in case we're logging. note that
    # anything done in the rescue shell will NOT be logged.
    {
        [ "$1" = "--exec" ] && exec bash -i
        bash -i
    } 0</dev/console 1>/dev/console 2>/dev/console
}

unset -f msg
msg() {
    [ "${quiet}" != "y" ] && echo "$@"
}

mount_setup

# parse the kernel command line
parse_cmdline </proc/cmdline

# setup logging as early as possible
rdlogger_start

quiet="$(getarg quiet)"

disablehooks="$(getarg disablehooks)"
# busybox ash supports string replacements
# shellcheck disable=SC3060
for d in ${disablehooks//,/ }; do
    [ -e "/hooks/$d" ] && chmod 644 "/hooks/$d"
done

if [ -x "/hooks/plymouth" ]; then
    echo -e '\e[1;31m!\e[0m Plymouth is not supported here'
    chmod 644 "/hooks/plymouth"
fi

# shellcheck disable=SC1091
. /config

# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_earlyhook' 'early hook' $EARLYHOOKS

if [ -n "$earlymodules$MODULES" ]; then
    # busybox ash supports string replacements
    # shellcheck disable=SC3060,SC2086
    modprobe -qab ${earlymodules//,/ } $MODULES
fi

# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_hook' 'hook' $HOOKS

exec 0</dev/console 1>/dev/console 2>/dev/console

[ -e "/etc/inputrc" ] && set -o emacs

msg ''

itsquiet || {
    [ -f /banner_usb ] && cat /banner_usb
}

itsquiet || display_version

process_presets /proc/cmdline

if [ "$skuf_skip" == 1 ]; then
    apply_presets
else
    user_read
fi

bring_lo_up

get_dhcp

quirk_vars
quirk_post

# honor the old behavior of break=y as a synonym for break=premount
break="$(getarg break)"
if [ "${break}" = "y" ] || [ "${break}" = "premount" ]; then
    # shellcheck disable=SC2086
    run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
    echo ":: Pre-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

mount_samba

#fsck_in_samba

mount_newroot

setup_sambaopts

setup_kernelopts

unpack_switch

prepare_kexec

prepare_switch

unmount_stuff

kill_dhcp_client

shutdown_interfaces

msg "[] Finishing some late work"
# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_latehook' 'late hook' $LATEHOOKS

msg "[] Doing some cleanup"
# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_cleanuphook' 'cleanup hook' $CLEANUPHOOKS

if [ "${break}" = "postmount" ]; then
    # shellcheck disable=SC2086
    run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
    echo ":: Post-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

# this should always be the last thing we do before the switch_root.
rdlogger_stop

perform_kexec

# vim: set ft=sh ts=4 sw=4 et:
