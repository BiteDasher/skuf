#!/usr/bin/bash

readonly skuf_version="11.0+37.3"
readonly sep="$(echo -ne '\x1F')"

smbaddr="$sep"
smbport="$sep"
smbversion="$sep"
smbdomain="$sep"
smbusername="$sep"
smbpassword="$sep"
smbvolumepath="$sep"
smbvolumefilename="$sep"
smbswapfilename="$sep"
smbmountopts="$sep"
newrootmountopts="$sep"
newrootfsck="$sep"
smbmode="ro"

re_smbusername=
re_smbpassword=
uq_smbvolumepath=
uq_smbvolumefilename=
uq_smbswapfilename=

kernelopts="$sep"

kernelpath="$sep"
initramfspath="$sep"

interface_list=
sambaopts=

display_version() {
    local letter1="$(( RANDOM % 7 ))"
    local letter2="$(( RANDOM % 7 ))"
    local letter3="$(( RANDOM % 7 ))"
    local letter4="$(( RANDOM % 7 ))"

    echo -e "\e[1;3${letter1}mS\e[0m\e[1;3${letter2}mK\e[0m\e[1;3${letter3}mU\e[0m\e[1;3${letter4}mF\e[0m v${skuf_version}"
}

___() {
    if [ "$1" == "_" ]; then
        echo -e '\e[0m'
    else
        echo -ne '\e[0m'
    fi
}

check_smbusername() {
    if [ "$smbusername" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbusername" ]; then
        echo -e "  \e[1;31m! Login missing\e[0m"
        return 1
    fi

    return 0
}

check_smbusername2() {
    if [ "$re_smbusername" == "$sep" ]; then
        return 1
    fi

    return 0
}

check_smbpassword() {
    if [ "$smbpassword" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbpassword" ]; then
        echo -e "  \e[1;31m! Password missing\e[0m"
        return 1
    fi

    return 0
}

check_smbpassword2() {
    if [ "$re_smbpassword" == "$sep" ]; then
        return 1
    fi

    return 0
}

read_smbpassword() {
    local password charcount prompt char

    echo -n "Password:               $ylw"

    charcount=0
    while IFS= read -p "$prompt" -r -s -n 1 char; do
        if [[ $char == $'\0' ]] ; then
            break
        fi
        if [[ $char == $'\177' ]] || [[ $char == $'\010' ]]; then
            if [ $charcount -gt 0 ] ; then
                charcount=$((charcount-1))
                prompt=$'\b \b'
                password="${password%?}"
            else
                prompt=''
            fi
        else
            charcount=$((charcount+1))
            prompt='*'
            password="${password}${char}"
        fi
    done

    if [ "$1" == "retry" ]; then
        re_smbpassword="$password"
    else
        smbpassword="$password"
    fi

}

check_smbaddr() {
    if [ "$smbaddr" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbaddr" ]; then
        echo -e "  \e[1;31m! SAMBA server address missing\e[0m"
        return 1
    fi
    # shellcheck disable=SC1003
    case "$smbaddr" in
        *'/'*|*'\'*)
            echo -e "  \e[1;31m! SAMBA server address cannot be a path\e[0m"
            return 1
        ;;
    esac

    return 0
}

check_smbport() {
    if [ "$smbport" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbport" ]; then
        return 0
    fi
    if [ -n "$smbport" ] && [ -z "${smbport//[0-9]/}" ]; then
        return 0
    else
        echo -e "  \e[1;31m! This does not look like SAMBA port\e[0m"
        return 1
    fi
}

check_smbversion() {
    if [ "$smbversion" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbversion" ]; then
        return 0
    fi
}

check_smbdomain() {
    if [ "$smbdomain" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbdomain" ]; then
        return 0
    fi
}

check_smbvolumepath() {
    if [ "$smbvolumepath" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbvolumepath" ]; then
        return 0
    fi
}

check_smbvolumefilename() {
    if [ "$smbvolumefilename" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbvolumefilename" ]; then
        echo -e "  \e[1;31m! Volume file name missing\e[0m"
        return 1
    fi
    case "$smbvolumefilename" in
        *"/")
            echo -e "  \e[1;31m! Volume file cannot be a folder\e[0m"
            return 1
        ;;
    esac

    return 0
}

check_smbswapfilename() {
    if [ "$smbswapfilename" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbswapfilename" ]; then
        return 0
    fi
    case "$smbswapfilename" in
        *"/")
            echo -e "  \e[1;31m! swap file cannot be a folder\e[0m"
            return 1
        ;;
    esac

    return 0
}

check_smbmountopts() {
    if [ "$smbmountopts" == "$sep" ]; then
        return 1
    fi
    if [ -z "$smbmountopts" ]; then
        return 0
    fi
}

check_newrootmountopts() {
    if [ "$newrootmountopts" == "$sep" ]; then
        return 1
    fi
    if [ -z "$newrootmountopts" ]; then
        return 0
    fi
}

check_newrootfsck() {
    if [ "$newrootfsck" == "$sep" ]; then
        return 1
    fi
    case "$newrootfsck" in
        Y|y|Yes|yes|Д|д|Да|да)
            newrootfsck="Yes"
            return 0
        ;;
        N|n|No|no|Н|н|Нет|нет)
            newrootfsck="No"
            return 0
        ;;
        "")
            return 0
        ;;
        *)
            echo -e "  \e[1;31m! Unknown answer variant\e[0m"
            return 1
        ;;
    esac
}

check_kernelopts() {
    if [ "$kernelopts" == "$sep" ]; then
        return 1
    fi
    if [ -z "$kernelopts" ]; then
        return 0
    fi
}

check_kernelpath() {
    if [ "$kernelpath" == "$sep" ]; then
        return 1
    fi
    if [ -z "$kernelpath" ]; then
        echo -e "  \e[1;31m! Path to kernel missing\e[0m"
        return 1
    fi
    case "$kernelpath" in
        "/"*)
            return 0
        ;;
        *)
            echo -e "  \e[1;31m! You should type FULL path to kernel\e[0m"
            return 1
        ;;
    esac
}

check_initramfspath() {
    if [ "$initramfspath" == "$sep" ]; then
        return 1
    fi
    if [ -z "$initramfspath" ]; then
        echo -e "  \e[1;31m! Path to initramfs missing\e[0m"
        return 1
    fi
    case "$initramfspath" in
        "/"*)
            return 0
        ;;
        *)
            echo -e "  \e[1;31m! You should type FULL path to initramfs\e[0m"
            return 1
        ;;
    esac
}

user_read() {
    local ylw="$(echo -e '\e[1;33m')"
    local blu="$(echo -e '\e[1;36m')"

    echo -e "To change the keyboard layout, press \e[1mAlt+Shift\e[0m (ru)" # SKUF_RU #

    while ! check_smbusername; do
        read -e -p "Login:                  $ylw" \
                smbusername
        ___
    done
    while ! check_smbpassword; do
                read_smbpassword
        ___ _
    done
    while ! check_smbaddr; do
        read -e -p "SAMBA server address:   $ylw" \
                # SAMBA_ADDRESS #
        ___
    done
    while ! check_smbport; do
        read -e -p "SAMBA server port:      $ylw" \
                # SAMBA_PORT #
        ___
    done
    while ! check_smbversion; do
        read -e -p "SAMBA protocol version: $ylw" \
                # SAMBA_VERSION #
        ___
    done
    while ! check_smbdomain; do
        read -e -p "SAMBA server domain:    $ylw" \
                # SAMBA_DOMAIN #
        ___
    done
    while ! check_smbvolumepath; do
        read -e -p "Path to your folder:    $ylw" \
                # VOLUME_PATH #
        ___
    done
    while ! check_smbvolumefilename; do
        read -e -p "Volume file name:       $ylw" \
                # VOLUME_FILENAME #
        ___
    done
    while ! check_smbswapfilename; do
        read -e -p "swap file name:         $ylw" \
                # SWAP_FILENAME #
        ___
    done
    while ! check_smbmountopts; do
        read -e -p "Extra SAMBA mount options:  $ylw" \
                # SAMBA_EXTRA_MOUNT_OPTS #
        ___
    done
    while ! check_newrootmountopts; do
        read -e -p "Extra volume mount options: $ylw" \
                # VOLUME_EXTRA_MOUNT_OPTS #
        ___
    done
    while ! check_newrootfsck; do
        read -e -p "Check volume FS? [Yes/no]:  $ylw" \
                # CHECK_FS #
        ___
    done
    while ! check_kernelopts; do
        read -e -p "Extra kernel parameters:    $ylw" \
                # EXTRA_KERNEL_OPTS #
        ___
    done
    echo '....................................'
    while ! check_kernelpath; do
        read -e -p "Path to new kernel:         $blu" \
                # PATH_TO_NEW_KERNEL #
        ___
    done
    while ! check_initramfspath; do
        read -e -p "Path to new initramfs:      $blu" \
                # PATH_TO_NEW_INITRAMFS #
        ___
    done

    ___ _
}

bring_lo_up() {
    echo "[] Bringing UP 'lo' network interface"
    ip link set lo up
}

shutdown_interfaces() {
    local i

    echo "[] Bringing DOWN network interfaces"

    ip addr flush dev lo
    ip link set lo down

    for i in $interface_list; do
        ip addr flush dev "$i"
        ip link set "$i" down
    done
}

get_dhcp() {
    local i interface x="0"

    for i in /sys/class/net/*; do
        interface="${i##*/}"

        case "$interface" in
            "")   continue ;;
            eth*) : ;;
            en*)  : ;;
            *)    continue ;;
        esac

        interface_list="$interface_list $interface"
        x=$(( x + 1 ))
    done

    if [ $x -eq 0 ]; then
        echo "Error: no wired network interface found."
        # shellcheck disable=SC2086
        run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
        launch_interactive_shell --exec
    fi

    echo "[] Obtaining IP address via DHCP"

    if ! dhcpcd --allowinterfaces 'eth* en*'; then
        # We should try again (for buggy IPv6 RA)
        echo "-> dhcpcd failed. Trying again..."
        sleep 3
        sed -i 's/^# ipv6ra_fork #$/ipv6ra_fork/' /etc/dhcpcd.conf
        if ! dhcpcd --allowinterfaces 'eth* en*'; then
            sed -i 's/^ipv6ra_fork$/# ipv6ra_fork #/' /etc/dhcpcd.conf
            echo "Failed to acquire DHCP address."
            launch_interactive_shell
        fi
    fi

    echo "-> IP address received. Sleeping 5 seconds..."
    sleep 5
}

quirk_vars() {
    echo "[] Quirking variables"

    uq_smbvolumepath="$smbvolumepath"
    smbvolumepath="${smbvolumepath//@u@/${smbusername/@*/}}"
    smbvolumepath="${smbvolumepath//@fu@/${smbusername}}"
    case "$smbvolumepath" in
        "/")     : ;;
        "/"*"/") : ;;
        "/"*)    smbvolumepath="${smbvolumepath}/" ;;
        *"/")    smbvolumepath="/${smbvolumepath}" ;;
        "")      smbvolumepath="/" ;;
        *)       smbvolumepath="/${smbvolumepath}/" ;;
    esac

    uq_smbvolumefilename="$smbvolumefilename"
    smbvolumefilename="${smbvolumefilename//@u@/${smbusername/@*/}}"
    smbvolumefilename="${smbvolumefilename//@fu@/${smbusername}}"
    case "$smbvolumefilename" in
        "/"*) smbvolumefilename="${smbvolumefilename#/}" ;;
    esac

    uq_smbswapfilename="$smbswapfilename"
    smbswapfilename="${smbswapfilename//@u@/${smbusername/@*/}}"
    smbswapfilename="${smbswapfilename//@fu@/${smbusername}}"
    case "$smbswapfilename" in
        "/"*) smbswapfilename="${smbswapfilename#/}" ;;
    esac

    return 0
}

retry_samba() {
    local ylw="$(echo -e '\e[1;33m')"
    local i x="1"
    i="$1"

    if [ -z "$i" ] || [ -n "${i//[0-9]/}" ]; then
        i="2"
    fi

    echo -e "\e[0;31mFailed to mount SAMBA share\e[0m! \e[0;36mEnter your credentials\e[0m \e[1magain\e[0m."
    echo -e "Press \e[1;36m[Enter]\e[0m to use your old username/password"

    while [ $x -le $i ]; do
        re_smbusername="$sep"
        re_smbpassword="$sep"
        smbvolumepath="$uq_smbvolumepath"
        smbvolumefilename="$uq_smbvolumefilename"
        smbswapfilename="$uq_smbswapfilename"
        while ! check_smbusername2; do
            read -e -p "Login:                  $ylw" \
                    re_smbusername
            ___
        done

        if [ -n "$re_smbusername" ]; then
            smbusername="$re_smbusername"
        fi

        while ! check_smbpassword2; do
                    read_smbpassword retry
            ___ _
        done

        if [ -n "$re_smbpassword" ]; then
            smbpassword="$re_smbpassword"
        fi

        quirk_vars

        finalusername="username=$smbusername,"
        [ -z "$smbport"      ] || finalport="port=$smbport,"
        [ -z "$smbversion"   ] || finalversion="vers=$smbversion,"
        [ -z "$smbdomain"    ] || finaldomain="domain=$smbdomain,"
        [ -z "$smbmountopts" ] || finalmountopts="$smbmountopts,"

        echo "[] Remounting SAMBA"

        if PASSWD="$smbpassword" mount -t cifs -o "${finalusername}${finalport}${finaldomain}${finalmountopts}${finalversion}${smbmode}" "//${smbaddr}${smbvolumepath}" /samba; then
            return 0
        else
            echo "Failed to mount SAMBA share!"
            x=$(( x + 1 ))
            continue
        fi
    done

    return 1
}

mount_samba() {
    finalusername="username=$smbusername,"
    [ -z "$smbport"      ] || finalport="port=$smbport,"
    [ -z "$smbversion"   ] || finalversion="vers=$smbversion,"
    [ -z "$smbdomain"    ] || finaldomain="domain=$smbdomain,"
    [ -z "$smbmountopts" ] || finalmountopts="$smbmountopts,"

    echo "[] Mounting SAMBA"

    if ! PASSWD="$smbpassword" mount -t cifs -o "${finalusername}${finalport}${finaldomain}${finalmountopts}${finalversion}${smbmode}" "//${smbaddr}${smbvolumepath}" /samba; then
        if ! retry_samba 2; then
            echo "Failed to mount SAMBA share!"
            echo "PASSWD=\"$smbpassword\" mount -t cifs -o \"${finalusername}${finalport}${finaldomain}${finalmountopts}${finalversion}${smbmode}\" \"//${smbaddr}${smbvolumepath}\" /samba"
            launch_interactive_shell
        fi
    fi
}

fsck_in_samba() {
    # We shouldn't do it in R/O mode...
    case "$newrootfsck" in
    Yes|yes|Y|y)
    if [ "$(blkid -o value -s TYPE /samba/"${smbvolumefilename}")" == "btrfs" ]; then
        btrfsck /samba/"${smbvolumefilename}" || launch_interactive_shell
    else
        fsck -T -a -C /samba/"${smbvolumefilename}"
        fsckreturn="$?"

        if [ -n "$fsckreturn" ] && [ "$fsckreturn" -ne 255 ]; then

        if bitfield_has_bit "$fsckreturn" 4; then
            echo "fsck failed..."
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 2; then
            echo "fsck tells you need to reboot"
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 8; then
            echo "Something went wrong while fsck..."
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 16; then
            echo "Syntax error in fsck"
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 32; then
            echo "Somehow you canceled fsck"
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 128; then
            echo "fsck FATAL ERROR xD"
            launch_interactive_shell
        fi

        fi
    fi
    ;;
    No|no|N|n)
        :
    ;;
    "")
        :
    ;;
    esac
}

mount_newroot() {
    local newrootmountoptsx

    echo "[] Mounting volume"

    if [ -n "$newrootmountopts" ]; then
        newrootmountoptsx=",$newrootmountopts"
    fi

    if [ "$(blkid -o value -s TYPE /samba/"${smbvolumefilename}")" == "ext4" ]; then
        if ! mount -o "ro,noload${newrootmountoptsx}" /samba/"${smbvolumefilename}" /new_root; then
            echo "Failed to mount /new_root!"
            echo "mount -o \"ro,noload${newrootmountoptsx}\" /samba/\"${smbvolumefilename}\" /new_root"
            launch_interactive_shell
        fi
    else
        if ! mount -o "ro${newrootmountoptsx}" /samba/"${smbvolumefilename}" /new_root; then
            echo "Failed to mount /new_root!"
            echo "mount -o \"ro${newrootmountoptsx}\" /samba/\"${smbvolumefilename}\" /new_root"
            launch_interactive_shell
        fi
    fi
}

setup_sambaopts() {
    local sambaoptsx

    echo "[] Building and encrypting /proc/cmdline"

    sambaoptsx="${smbaddr}${sep}${smbport}${sep}${smbversion}${sep}${smbdomain}${sep}${smbusername}${sep}${smbpassword}${sep}${uq_smbvolumepath}${sep}${uq_smbvolumefilename}${sep}${uq_smbswapfilename}${sep}${smbmountopts}${sep}${newrootmountopts}${sep}${newrootfsck}"
    # SKUF_OPENSSL_ENC #
    sambaoptsx="$(echo -n "$sambaoptsx" | openssl enc -e -aes-256-cbc -salt -iter 1234 -base64 -A -k '12345678' -in - -out -)" # SKUF_OPENSSL_ENC_RM #
    sambaoptsx="${sambaoptsx//=/%}"
    sambaoptsx="${sambaoptsx:10}"

    # SKUF_ENC_TUNE #

    sambaopts="fuckmyass=${sambaoptsx}:"
}

setup_kernelopts() {
    if [ -n "$kernelopts" ]; then
        kernelopts="$kernelopts "
    fi
}

unpack_switch() {
    echo "[] Unpacking environment for switch_root"

    mount -t tmpfs switch /switch -o size=5M

    tar -x -f /rootfs.tar -C /switch
}

prepare_kexec() {
    echo "[] Preparing kexec"
    echo "[] Loading kernel and initramfs into RAM"

    if ! /switch/bin/kexec -l "/new_root${kernelpath}" --initrd="/new_root${initramfspath}" --command-line="${kernelopts}${sambaopts}" --console-vga --reset-vga; then
        echo "Failed to load kernel and initramfs to RAM!"
        echo "/switch/bin/kexec -l \"/new_root${kernelpath}\" --initrd=\"/new_root${initramfspath}\" --command-line=\"${kernelopts}${sambaopts}\" --console-vga --reset-vga"
        launch_interactive_shell
    fi
}

prepare_switch() {
    echo "[] Preparing environment for switch_root"

    ln -sfT /proc/self/mounts /switch/etc/mtab

    echo "[] Editing kexec script"

    cat <<'SWITCHEOF' >> /switch/init
export PATH=/bin

kill -SIGTERM -1
sleep 1
kill -SIGKILL -1
sleep 1

clear
echo -ne '\e[3J'

exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console

_soterm="$(stty size)"

umount -a
umount -a

_ud="${_soterm%% *}"
_lr="${_soterm##* }"
_udc="$(( ( _ud - 8 ) / 2 ))"
_lrc="$(( ( _lr - 53 ) / 2 ))"

funmsg1=" _    _                                            _ "
funmsg2="| |  | |                                          | |"
funmsg3="| |__| | ___ _ __ ___  __      _____    __ _  ___ | |"
funmsg4="|  __  |/ _ \ '__/ _ \ \ \ /\ / / _ \  / _\` |/ _ \| |"
funmsg5="| |  | |  __/ | |  __/  \ V  V /  __/ | (_| | (_) |_|"
funmsg6="|_|  |_|\___|_|  \___|   \_/\_/ \___|  \__, |\___/(_)"
funmsg7="                                        __/ |        "
funmsg8="                                       |___/         "

clear
echo -ne '\e[3J'

xxx=0
while [ "$xxx" != "$_udc" ]; do
    xxx="$(( xxx + 1 ))"
    echo ""
done

yyy=0
zzz=0
while [ "$yyy" != 8 ]; do
    yyy="$(( yyy + 1 ))"
    zzz=0
    while [ "$zzz" != "$_lrc" ]; do
        zzz="$(( zzz + 1 ))"
        echo -n " "
    done
    eval 'echo "$funmsg'$yyy'"'
done

ccc=0
while [ "$ccc" != "$_udc" ]; do
    ccc="$(( ccc + 1 ))"
    echo ""
done

sleep 1

exec kexec -e
SWITCHEOF
}

unmount_stuff() {
    echo "[] Unmounting volume and SAMBA"
    umount /new_root
    sleep 1
    umount /samba
    sleep 1
}

kill_dhcp_client() {
    echo "[] Shutting down dhcpcd"
    dhcpcd -x
}

perform_kexec() {
    echo "[!] Executing new kernel"

    exec env -i TERM="$TERM" SHELL=/bin/ash switch_root \
         /switch /init
}

export PATH='/usr/local/sbin:/usr/local/bin:/usr/bin'

udevd_running=0
mount_handler=default_mount_handler
init=/sbin/init
rd_logmask=0

. /init_functions

unset -f launch_interactive_shell
# shellcheck disable=SC2120
launch_interactive_shell() {
    export PS1='[rootfs \W]\$ '

    # explicitly redirect to /dev/console in case we're logging. note that
    # anything done in the rescue shell will NOT be logged.
    {
        [ "$1" = "--exec" ] && exec bash -i
        bash -i
    } 0</dev/console 1>/dev/console 2>/dev/console
}

mount_setup

# parse the kernel command line
parse_cmdline </proc/cmdline

# setup logging as early as possible
rdlogger_start

if [ -e "/hooks/plymouth" ]; then
    echo -e '\e[1;31m!\e[0m Plymouth is not supported here'
    rm -f "/hooks/plymouth"
fi
# busybox ash supports string replacements
# shellcheck disable=SC3060
# assigned by parse_cmdline
# shellcheck disable=SC2154
for d in ${disablehooks//,/ }; do
    [ -e "/hooks/$d" ] && chmod 644 "/hooks/$d"
done

# shellcheck disable=SC1091
. /config

# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_earlyhook' 'early hook' $EARLYHOOKS

if [ -n "$earlymodules$MODULES" ]; then
    # busybox ash supports string replacements
    # shellcheck disable=SC3060,SC2086
    modprobe -qab ${earlymodules//,/ } $MODULES
fi

# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_hook' 'hook' $HOOKS

# honor the old behavior of break=y as a synonym for break=premount
# assigned by parse_cmdline
# shellcheck disable=SC2154
if [ "${break}" = "y" ] || [ "${break}" = "premount" ]; then
    # shellcheck disable=SC2086
    run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
    echo ":: Pre-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

exec 0</dev/console 1>/dev/console 2>/dev/console

if [ -e "/etc/inputrc" ]; then
    set -o emacs
else
    :
fi

echo ''
for i in 1 2 3; do
    echo -ne '\rHello! \e[1;32m|\e[0m'
    sleep 0.1
    echo -ne '\rHello! \e[1;32m/\e[0m'
    sleep 0.1
    echo -ne '\rHello! \e[1;32m-\e[0m'
    sleep 0.1
    echo -ne '\rHello! \e[1;32m\\\e[0m'
    sleep 0.1
done
echo -ne '\r         '
echo -ne '\r'

[ -f /banner_usb ] && cat /banner_usb

display_version

user_read

bring_lo_up

get_dhcp

quirk_vars

mount_samba

#fsck_in_samba

mount_newroot

setup_sambaopts

setup_kernelopts

unpack_switch

prepare_kexec

prepare_switch

unmount_stuff

kill_dhcp_client

shutdown_interfaces

echo "[] Finishing some late work"
# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_latehook' 'late hook' $LATEHOOKS

echo "[] Doing some cleanup"
# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_cleanuphook' 'cleanup hook' $CLEANUPHOOKS

# this should always be the last thing we do before the switch_root.
rdlogger_stop

perform_kexec

# vim: set ft=sh ts=4 sw=4 et:
