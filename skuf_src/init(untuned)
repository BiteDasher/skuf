#!/usr/bin/bash

readonly skuf_version="21.0+38.1"
readonly sep="$(echo -ne '\x1F')"

readonly _nl='
'

display_version() {
    local letter1="$(( RANDOM % 7 ))"
    local letter2="$(( RANDOM % 7 ))"
    local letter3="$(( RANDOM % 7 ))"
    local letter4="$(( RANDOM % 7 ))"

    echo -e "\e[1;3${letter1}mS\e[0m\e[1;3${letter2}mK\e[0m\e[1;3${letter3}mU\e[0m\e[1;3${letter4}mF\e[0m v${skuf_version}"
}

itsquiet() {
    [ "${quiet}" == "y" ]
}

silence() {
    [ "${quiet}" == "y" ] && return 0
    command -v plymouth >/dev/null 2>&1 && plymouth --ping
}

plymouth_show_msg() {
    command -v plymouth >/dev/null 2>&1 || return 0
    if plymouth --ping; then
        itsquiet || plymouth display-message --text="${*//\\n/${_nl}}"
    fi

    if [ -z "$PLY_NOSAVE" ]; then
        _ply_last_msg="${*//\\n/${_nl}}"
    else
        _ply_last_msg=""
    fi
}

plymouth_pause() {
    command -v plymouth >/dev/null 2>&1 || return 0
    if plymouth --ping; then
        plymouth report-error
        plymouth hide-splash
        plymouth deactivate
    fi
}

plymouth_continue() {
    command -v plymouth >/dev/null 2>&1 || return 0
    if plymouth --ping; then
        plymouth reactivate
        plymouth show-splash
        itsquiet || plymouth display-message --text="$_ply_last_msg"
    fi
}

flush_stdin() {
    local unused
    read -r -d '' -t 0.1 -n 9999 unused
    unset unused
}

asshole_parse() {
    _sambaopts="$(grep -o 'skuf49=.*:')"
    if [ -n "$_sambaopts" ]; then
    ################################

    _sambaopts="${_sambaopts/skuf49=/}"
    _sambaopts="${_sambaopts//:/}"
    _sambaopts="${_sambaopts//%/=}"

    # SKUF_DEC_TUNE #

    _sambaopts="U2FsdGVkX1${_sambaopts}"

    # SKUF_OPENSSL_DEC #
    if _sambaopts="$(echo -n "$_sambaopts" | openssl enc -d -aes-256-cbc -salt -iter 1234 -base64 -A -k '12345678' -in - -out -)"; then # SKUF_OPENSSL_DEC_RM #
        _sambaopts="skuf49=${_sambaopts}:"
    else
        echo "Failed to decrypt options!"
        launch_interactive_shell
        _sambaopts="skuf49=$(cat /_sambaopts):"
    fi
    ################################
    else
        echo "Something went wrong. Failed to fetch mount options with cmdline."
        launch_interactive_shell
        _sambaopts="skuf49=$(cat /_sambaopts):"
    fi

    sambaopts="${_sambaopts#*=}"

    smbaddr="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    smbport="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    smbversion="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    smbdomain="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    smbusername="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    smbpassword="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    smbvolumepath="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    smbvolumefilename="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    smbswapfilename="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    smbmountopts="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    newrootmountopts="${sambaopts%%"${sep}"*}"
        sambaopts="${sambaopts#*"${sep}"}" # cut
    newrootfsck="${sambaopts%%:*}"
        #sambaopts="${sambaopts#*"${sep}"}" # cut
        sambaopts="${sambaopts#*:}" # cut

    smbmode="rw"
}

bring_lo_up() {
    ip link set lo up
}

get_smbaddr_type() {
    local so_this_is

    if echo "$smbaddr" | grep -q -E -o '^[0-9]{1,3}(\.[0-9]{1,3}){3}$'; then
        case "$smbaddr" in
            "169.254."*)
                so_this_is=ipv4ll
            ;;
            *)
                so_this_is=ipv4
            ;;
        esac
    elif echo "$smbaddr" | grep -q -E -o '^(::)?[0-9a-fA-F]{1,4}(::?[0-9a-fA-F]{1,4}){1,7}(::)?(%[0-9a-zA-Z_-]+)?$'; then
        case "$smbaddr" in
            [fF][eE]80::*)
                so_this_is=slaac
            ;;
            *)
                so_this_is=ipv6
            ;;
        esac
    elif echo "$smbaddr" | grep -q -o '.*\.local$'; then
        so_this_is=zeroconf
    else
        so_this_is=domain
    fi

    echo "$so_this_is"
}

check_dhcpcd() {
    # brain-aneurysm.mp3
    local dump i ipv4_grep ipv6ra_grep dhcpv6_grep ipv4=0 ipv6=0 slaac=0 ipv4ll=0

    if ! dump="$(dhcpcd -U 0</dev/null)"; then
        echo "Error: failed to dump DHCP lease"
        return 1
    fi

    if ! echo "$dump" | grep -q "[^[:space:]]"; then
        echo "dhcpcd failed: no network interface has been used"
        return 1
    fi

    if ! echo "$dump" | grep -q -E -o "^ifcarrier=[\"']?up[\"']?$"; then
        echo "dhcpcd failed: no working carrier found"
        return 1
    fi

    ipv4_grep="$(echo "$dump"   | grep -E -o "^ip_address=[\"']?..*[\"']?$")"
    ipv6ra_grep="$(echo "$dump" | grep -E -o "^nd[0-9]+_addr[0-9]+=[\"']?..*[\"']?$")"
    dhcpv6_grep="$(echo "$dump" | grep -E -o "^dhcp6_ia_na[0-9]+_ia_addr[0-9]+=[\"']?..*[\"']?$")"

    while read -r i; do
        i="${i#*=}"
        i="${i//[\"\']/}"
        case "$i" in
            "") :                  ;;
            "169.254."*) ipv4ll=1  ;;
            *) ipv4=1              ;;
        esac
    done <<GREP
$ipv4_grep
GREP

    while read -r i; do
        i="${i#*=}"
        i="${i//[\"\']/}"
        case "$i" in
            "") :                  ;;
            [fF][eE]80::*) slaac=1 ;;
            *) ipv6=1              ;;
        esac
    done <<GREP
$ipv6ra_grep
$dhcpv6_grep
GREP

    case "$type_of_smbaddr" in
        "ipv4")
                if [ $ipv4 -gt 0 ]; then
                    return 0
                else
                    echo "dhcpcd failed: IPv4 address not received"
                    return 1
                fi
        ;;
        "ipv4ll")
                if [ $ipv4   -gt 0 ] || \
                   [ $ipv4ll -gt 0 ]; then
                    return 0
                else
                    echo "dhcpcd failed: IPv4 address not received"
                    return 1
                fi
        ;;
        "ipv6"|"slaac")
                if [ $ipv6  -gt 0 ] || \
                   [ $slaac -gt 0 ]; then
                    return 0
                else
                    echo "dhcpcd failed: IPv6 address not received"
                    return 1
                fi
        ;;
        "zeroconf"|"domain")
                if [ $ipv4   -gt 0 ] || \
                   [ $ipv6   -gt 0 ] || \
                   [ $slaac  -gt 0 ] || \
                   [ $ipv4ll -gt 0 ]; then
                    return 0
                else
                    echo "dhcpcd failed: IP address not received"
                    return 1
                fi
        ;;
    esac

    return 1
}

get_dhcp() {
    local i interface x=0 sleepsec=5 fail2start=0

    for i in /sys/class/net/*; do
        interface="${i##*/}"

        case "$interface" in
            "")   continue ;;
            eth*) : ;;
            en*)  : ;;
            *)    continue ;;
        esac

        interface_list="$interface_list $interface"
        x=$(( x + 1 ))
    done

    if [ $x -eq 0 ]; then
        echo "Error: no wired network interface found. Good luck."
        # shellcheck disable=SC2086
        run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
        launch_interactive_shell --exec
    fi

    type_of_smbaddr="$(get_smbaddr_type)"
    case "$type_of_smbaddr" in "zeroconf"|"ipv4ll")
        sleepsec=10
        sed -i 's/^noipv4ll$/# noipv4ll #/' /etc/dhcpcd.conf ;;
    esac
    ###################################
    if dhcpcd -q --allowinterfaces 'eth* en*'; then
        msg "-> dhcpcd forked. Sleeping $sleepsec seconds..."
        sleep "$sleepsec"
    else
        fail2start=1
    fi
    ###################################
    if [ $fail2start -eq 1 ] || ! check_dhcpcd; then
        # We should try again
        msg "-> dhcpcd failed. Trying again..."
        sleep 1
        dhcpcd -q -q -x
        fail2start=0
        # For buggy IPv6 RA
        sed -i 's/^# ipv6ra_fork #$/ipv6ra_fork/' /etc/dhcpcd.conf
        ###################################
        if dhcpcd -q --allowinterfaces 'eth* en*'; then
            msg "-> dhcpcd forked. Sleeping $sleepsec seconds..."
            sleep "$sleepsec"
        else
            fail2start=1
        fi
        ###################################
        if [ $fail2start -eq 1 ] || ! check_dhcpcd; then
            case "$type_of_smbaddr" in "zeroconf"|"ipv4ll")
                sed -i 's/^# noipv4ll #$/noipv4ll/' /etc/dhcpcd.conf ;;
            esac
            sed -i 's/^ipv6ra_fork$/# ipv6ra_fork #/' /etc/dhcpcd.conf
            echo "Failed to acquire DHCP address."
            launch_interactive_shell
        fi
    fi
}

renice_dhcpcd() {
    local pid pids

    renice -15 -u dhcpcd >/dev/null

    pids="$(pidof dhcpcd 2>/dev/null)" || pids="$(pgrep dhcpcd)"
    for pid in $pids; do
        renice -15 -p "$pid" >/dev/null
    done
}

quirk_vars() {
    smbvolumepath="${smbvolumepath//@u@/${smbusername/@*/}}"
    smbvolumepath="${smbvolumepath//@fu@/${smbusername}}"
    case "$smbvolumepath" in
        "/")     : ;;
        "/"*"/") : ;;
        "/"*)    smbvolumepath="${smbvolumepath}/" ;;
        *"/")    smbvolumepath="/${smbvolumepath}" ;;
        "")      smbvolumepath="/" ;;
        *)       smbvolumepath="/${smbvolumepath}/" ;;
    esac

    smbvolumefilename="${smbvolumefilename//@u@/${smbusername/@*/}}"
    smbvolumefilename="${smbvolumefilename//@fu@/${smbusername}}"
    case "$smbvolumefilename" in
        "/"*) smbvolumefilename="${smbvolumefilename#/}" ;;
    esac

    smbswapfilename="${smbswapfilename//@u@/${smbusername/@*/}}"
    smbswapfilename="${smbswapfilename//@fu@/${smbusername}}"
    case "$smbswapfilename" in
        "/"*) smbswapfilename="${smbswapfilename#/}" ;;
    esac

    return 0
}

mount_samba() {
    finalusername="username=$smbusername,"
    [ -z "$smbport"      ] || finalport="port=$smbport,"
    [ -z "$smbversion"   ] || finalversion="vers=$smbversion,"
    [ -z "$smbdomain"    ] || finaldomain="domain=$smbdomain,"
    [ -z "$smbmountopts" ] || finalmountopts="$smbmountopts,"

    if ! PASSWD="$smbpassword" mount -t cifs -o "${finalusername}${finalport}${finaldomain}${finalmountopts}${finalversion}${smbmode}" "//${smbaddr}${smbvolumepath}" /samba; then
        echo "Failed to mount SAMBA share!"
        echo "PASSWD=\"$smbpassword\" mount -t cifs -o \"${finalusername}${finalport}${finaldomain}${finalmountopts}${finalversion}${smbmode}\" \"//${smbaddr}${smbvolumepath}\" /samba"
        launch_interactive_shell
    fi
}

fsck_in_samba() {
    # We shouldn't do it in R/O mode...
    case "$newrootfsck" in
    Yes|yes|Y|y)
    if [ "$(blkid -o value -s TYPE /samba/"${smbvolumefilename}")" == "btrfs" ]; then
        btrfsck /samba/"${smbvolumefilename}" || launch_interactive_shell
    else
        fsck -T -a -C /samba/"${smbvolumefilename}"
        fsckreturn="$?"

        if [ -n "$fsckreturn" ] && [ "$fsckreturn" -ne 255 ]; then

        if bitfield_has_bit "$fsckreturn" 4; then
            echo "fsck failed..."
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 2; then
            echo "fsck tells you need to reboot"
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 8; then
            echo "Something went wrong while fsck..."
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 16; then
            echo "Syntax error in fsck"
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 32; then
            echo "Somehow you canceled fsck"
            launch_interactive_shell
        elif bitfield_has_bit "$fsckreturn" 128; then
            echo "fsck FATAL ERROR xD"
            launch_interactive_shell
        fi

        fi
    fi
    ;;
    No|no|N|n)
        :
    ;;
    "")
        :
    ;;
    esac
}

mount_newroot() {
    if [ -z "$newrootmountopts" ]; then
        if ! mount /samba/"${smbvolumefilename}" /new_root; then
            echo "Failed to mount /new_root!"
            echo "mount /samba/\"${smbvolumefilename}\" /new_root"
            launch_interactive_shell
        fi
    else
        if ! mount -o "${newrootmountopts}" /samba/"${smbvolumefilename}" /new_root; then
            echo "Failed to mount /new_root!"
            echo "mount -o \"${newrootmountopts}\" /samba/\"${smbvolumefilename}\" /new_root"
            launch_interactive_shell
        fi
    fi
}

copy_resolvconf() {
    if [ -L /new_root/etc/resolv.conf ]; then
        rm -f /new_root/etc/resolv.conf
    fi
    cp -f -a /etc/resolv.conf /new_root/etc/resolv.conf || \
    cat /etc/resolv.conf > /new_root/etc/resolv.conf

    if [ -e /new_root/etc/resolv.conf.tail ]; then
        rm -f /new_root/etc/resolv.conf.tail
    fi
    cp -f -a /etc/resolv.conf.tail /new_root/etc/resolv.conf.tail || \
    cat /etc/resolv.conf.tail > /new_root/etc/resolv.conf.tail
}

copy_dhcpcd_data() {
    local filecopy

    if [ -f /new_root/etc/dhcpcd.conf ]; then
        rm -f /new_root/etc/dhcpcd.conf
    fi
    cp -f -a /etc/dhcpcd.conf /new_root/etc/dhcpcd.conf || \
    cat /etc/dhcpcd.conf > /new_root/etc/dhcpcd.conf

    if [ -d /new_root/var/lib/dhcpcd ]; then
        :
    else
        if [ -e /new_root/var/lib/dhcpcd ]; then
            rm -r -f /new_root/var/lib/dhcpcd
        fi
        install -d -m 750 /new_root/var/lib/dhcpcd
    fi

    rm -r -f /new_root/var/lib/dhcpcd/* 2>/dev/null
    for filecopy in /var/lib/dhcpcd/*; do
        [ "$filecopy" == "/var/lib/dhcpcd/*" ] && return 0
        cp -a "$filecopy" /new_root"$filecopy"
    done
}

save_version() {
    echo "$skuf_version" | install -Dm644 /dev/stdin /run/skuf_version
}

sysctl_tuning() {
    sysctl -q -w vm.dirty_background_ratio=10 \
                 vm.dirty_ratio=40
}

swapon_samba() {
    local devloop

    if [ -z "$smbswapfilename" ]; then
        return 0
    else
        plymouth_show_msg "Connecting swap file\n95%"
        if ! devloop="$(losetup --show --find -- /samba/"${smbswapfilename}")"; then
            echo "Failed to setup loop on /samba/${smbswapfilename}!"
            launch_interactive_shell
        fi

        sysctl -q -w vm.swappiness=5

        if ! swapon "$devloop"; then
            echo "Failed to swapon $devloop!"
            launch_interactive_shell
        fi
        #if ! swapon /samba/"${smbswapfilename}"; then
        #    echo "Failed to swapon /samba/$smbswapfilename!"
        #    launch_interactive_shell
        #fi
    fi
}

export PATH='/usr/local/sbin:/usr/local/bin:/usr/bin'

udevd_running=0
mount_handler=default_mount_handler
init=/sbin/init
rd_logmask=0

. /init_functions

unset -f launch_interactive_shell
# shellcheck disable=SC2120
launch_interactive_shell() {
    plymouth_pause

    export PS1='[rootfs \W]\$ '

    # explicitly redirect to /dev/console in case we're logging. note that
    # anything done in the rescue shell will NOT be logged.
    {
        [ "$1" = "--exec" ] && exec bash -i
        bash -i
    } 0</dev/console 1>/dev/console 2>/dev/console

    plymouth_continue
}

mount_setup

# parse the kernel command line
parse_cmdline </proc/cmdline

###
sleep 1
clear || echo -ne '\e[H\e[J'
echo -ne '\e[3J'
###

# setup logging as early as possible
rdlogger_start

# busybox ash supports string replacements
# shellcheck disable=SC3060
# assigned by parse_cmdline
# shellcheck disable=SC2154
for d in ${disablehooks//,/ }; do
    [ -e "/hooks/$d" ] && chmod 644 "/hooks/$d"
done

# shellcheck disable=SC1091
. /config

# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_earlyhook' 'early hook' $EARLYHOOKS

if [ -n "$earlymodules$MODULES" ]; then
    # busybox ash supports string replacements
    # shellcheck disable=SC3060,SC2086
    modprobe -qab ${earlymodules//,/ } $MODULES
fi

# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_hook' 'hook' $HOOKS

# honor the old behavior of break=y as a synonym for break=premount
# assigned by parse_cmdline
# shellcheck disable=SC2154
if [ "${break}" = "y" ] || [ "${break}" = "premount" ]; then
    # shellcheck disable=SC2086
    run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
    echo ":: Pre-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

# In case we using rdlogger
#exec 0</dev/console 1>/dev/console 2>/dev/console

if [ -e "/etc/inputrc" ]; then
    set -o emacs
else
    :
fi

echo ''
for i in 1 2 3; do
    msg -ne '\rHello! \e[1;32m|\e[0m'
    sleep 0.1
    msg -ne '\rHello! \e[1;32m/\e[0m'
    sleep 0.1
    msg -ne '\rHello! \e[1;32m-\e[0m'
    sleep 0.1
    msg -ne '\rHello! \e[1;32m\\\e[0m'
    sleep 0.1
done
msg -ne '\r         '
msg -ne '\r'

silence || {
    [ -f /banner_kexec ] && cat /banner_kexec
}

silence || display_version

plymouth_show_msg "Processing kernel command line\n10%"
asshole_parse </proc/cmdline

plymouth_show_msg "Bringing UP 'lo' network interface\n20%"
bring_lo_up

plymouth_show_msg "Obtaining IP address via DHCP\n30%"
get_dhcp

plymouth_show_msg "Changing the process priority of dhcpcd\n40%"
renice_dhcpcd

plymouth_show_msg "Quirking variables\n45%"
quirk_vars

plymouth_show_msg "Mounting SAMBA\n50%"
mount_samba

plymouth_show_msg "Checking the root file system for errors\n60%"
fsck_in_samba

plymouth_show_msg "Mounting root file system\n70%"
mount_newroot

plymouth_show_msg "Copying resolv.conf and dhcpcd data\n75%"
copy_resolvconf
copy_dhcpcd_data

plymouth_show_msg "Tuning sysctl variables\n80%"
sysctl_tuning

plymouth_show_msg "Checking if the swap needs to be activated\n90%"
swapon_samba

plymouth_show_msg "Booting...\n100%"
save_version

# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_latehook' 'late hook' $LATEHOOKS

# We rely on word splitting
# shellcheck disable=SC2086
run_hookfunctions 'run_cleanuphook' 'cleanup hook' $CLEANUPHOOKS

if [ "$(stat -c %D /)" = "$(stat -c %D /new_root)" ]; then
    # Nothing got mounted on /new_root. This is the end, we don't know what to do anymore
    # We fall back into a shell, but the shell has now PID 1
    # This way, manual recovery is still possible.
    # shellcheck disable=SC2086
    run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
    err "Failed to mount the real root device."
    echo "Bailing out, you are on your own. Good luck."
    echo
    launch_interactive_shell --exec
elif [ ! -x "/new_root${init}" ]; then
    # Successfully mounted /new_root, but ${init} is missing
    # The same logic as above applies
    # shellcheck disable=SC2086
    run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
    err "Root device mounted successfully, but ${init} does not exist."
    echo "Bailing out, you are on your own. Good luck."
    echo
    launch_interactive_shell --exec
fi

if [ "${break}" = "postmount" ]; then
    # shellcheck disable=SC2086
    run_hookfunctions 'run_emergencyhook' 'emergency hook' $EMERGENCYHOOKS
    echo ":: Post-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

# this should always be the last thing we do before the switch_root.
rdlogger_stop

plymouth_show_msg ""

exec env -i \
    "TERM=$TERM" \
    /usr/bin/switch_root /new_root "$init" "$@"

# vim: set ft=sh ts=4 sw=4 et:
